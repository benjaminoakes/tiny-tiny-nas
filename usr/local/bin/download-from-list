#!/bin/sh
set -o errexit

show_usage() {
  cat <<EOF
Usage: $0 csv_url destination [max_age_days]

Download files specified in a remote CSV file to the given destination.
Existing files are skipped.

The CSV has the format filename,url.  Very little parsing is done; only simple
comma separated values are allowed.

Example:

    $0 http://www.example.com/download.csv ~/Downloads/
EOF

  exit 1
}

# Fetch downloads given from a CSV
#
# Format: name,url
download_listed() {
  local first=1
  local name clean_name url

  # No parsing beyond splitting on comma
  while IFS=',' read name url; do
    clean_name=$(echo $name | sed 's/[?\/]/_/g')

    # Skip header
    if [ 0 -eq $first ]; then
      if [ -f "$clean_name" ]; then
        echo "File exists, skipping $clean_name"
      else
        wget "$url" -O "$clean_name.download"
        mv -v "$clean_name.download" "$clean_name"

        # Force updated mtime
        touch "$clean_name"

        # Automatically compute checksums
        md5sum "$clean_name" >> MD5SUMS
        sha1sum "$clean_name" >> SHA1SUMS
      fi
    fi

    first=0
  done
}

get_list_and_download() {
  # There's a bug with `wget -q`, so we download to a file instead.
  wget -O "$tmp_list" "$csv_url"

  mkdir -p "$destination"

  if [ "$max_age_days" != "" ]; then
    find "$destination" -type f -mtime +$max_age_days -exec rm -rfv {} \;
  fi

  cd "$destination"
  download_listed < "$tmp_list"

  rm -f "$tmp_list"
}

main() {
  csv_url="$1"
  destination="$2"
  max_age_days="$3"
  tmp_list=$(mktemp)

  if [ "$csv_url" = "" ] || [ "$destination" = "" ]; then
    show_usage
  else
    get_list_and_download
  fi
}

main $@
